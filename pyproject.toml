[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gan-cyber-range-sim"
version = "0.1.0"
description = "A generative adversarial cyber-range for security research and training"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Daniel Schmidt", email = "info@gan-cyber-range.org"}
]
maintainers = [
    {name = "Daniel Schmidt", email = "info@gan-cyber-range.org"}
]
keywords = ["cybersecurity", "research", "training", "kubernetes", "ai", "ml"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Education",
    "Topic :: System :: Networking :: Monitoring",
]
requires-python = ">=3.10"
dependencies = [
    "openai>=1.35.0",
    "anthropic>=0.30.0",
    "langchain>=0.2.0",
    "kubernetes>=29.0.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.4.0",
    "click>=8.1.0",
    "rich>=13.6.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.1",
    "pytest-mock>=3.11.1",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-html>=4.0.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
    "responses>=0.23.0",
]
security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.45.0",
    "detect-secrets>=1.4.0",
    "pip-audit>=2.6.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.1",
    "pytest-mock>=3.11.1",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-html>=4.0.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
    "responses>=0.23.0",
    "locust>=2.17.0",
]
performance = [
    "locust>=2.17.0",
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]
ml = [
    "torch>=2.0.0",
    "gym>=0.26.0",
    "stable-baselines3>=2.3.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
]

[project.scripts]
gan-cyber-range = "gan_cyber_range.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/gan-cyber-range-sim"
Documentation = "https://gan-cyber-range.readthedocs.io"
Repository = "https://github.com/yourusername/gan-cyber-range-sim"
Issues = "https://github.com/yourusername/gan-cyber-range-sim/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=gan_cyber_range",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--timeout=300",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "security: Security-related tests",
    "performance: Performance tests",
    "slow: Slow running tests",
    "smoke: Smoke tests for quick validation",
    "regression: Regression tests",
    "agent: Tests for AI agent functionality",
    "kubernetes: Tests requiring Kubernetes cluster",
    "network: Tests involving network operations",
]
timeout = 300
timeout_method = "thread"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]