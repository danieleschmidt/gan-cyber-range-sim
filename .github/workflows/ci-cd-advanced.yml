name: Advanced CI/CD Pipeline with Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  
  security-scan:
    name: üîí Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep detect-secrets pip-audit

      - name: Run Bandit Security Scanner
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Run Safety Check for Dependencies
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep Static Analysis
        run: |
          semgrep --config=auto src/ --json -o semgrep-report.json || true
          semgrep --config=auto src/

      - name: Run pip-audit for Vulnerability Scanning
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit

      - name: Detect Secrets
        run: |
          detect-secrets scan --all-files --force-use-all-plugins > .secrets.baseline || true
          detect-secrets audit .secrets.baseline

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
            pip-audit-report.json
            .secrets.baseline

  # =============================================================================
  # CODE QUALITY
  # =============================================================================
  
  code-quality:
    name: üìä Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run Black (Code Formatting)
        run: |
          black --check --diff src/ tests/

      - name: Run isort (Import Sorting)
        run: |
          isort --check-only --diff src/ tests/

      - name: Run Ruff (Linting)
        run: |
          ruff check src/ tests/ --output-format=github

      - name: Run MyPy (Type Checking)
        run: |
          mypy src/ --install-types --non-interactive

      - name: Generate Coverage Report
        run: |
          pytest tests/ --cov=gan_cyber_range --cov-report=xml --cov-report=html

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # =============================================================================
  # TESTING
  # =============================================================================
  
  test:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test,dev]

      - name: Run Unit Tests
        run: |
          pytest tests/unit/ -v --tb=short --junitxml=junit-unit.xml

      - name: Run Integration Tests
        run: |
          pytest tests/integration/ -v --tb=short --junitxml=junit-integration.xml
        env:
          # Mock environment for integration tests
          DATABASE_URL: sqlite:///:memory:
          REDIS_URL: redis://localhost:6379/15

      - name: Run Performance Tests
        run: |
          pytest tests/performance/ -v --tb=short --benchmark-only --benchmark-json=benchmark.json

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            junit-*.xml
            benchmark.json

  # =============================================================================
  # PERFORMANCE BENCHMARKING
  # =============================================================================
  
  performance:
    name: ‚ö° Performance Benchmarking
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[performance,test]

      - name: Run Performance Benchmarks
        run: |
          python scripts/performance-benchmark.py --json-output=performance-results.json

      - name: Analyze Performance Regression
        run: |
          python scripts/benchmark-analyzer.py --current=performance-results.json --baseline=.github/baseline-performance.json

      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  # =============================================================================
  # DOCUMENTATION
  # =============================================================================
  
  documentation:
    name: üìö Documentation Generation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs]

      - name: Generate API Documentation
        run: |
          python scripts/generate_api_docs.py

      - name: Build Documentation Site
        run: |
          mkdocs build

      - name: Upload Documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: |
            docs/
            site/

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  # =============================================================================
  # CONTAINER SCANNING
  # =============================================================================
  
  container-security:
    name: üê≥ Container Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Container Structure Test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          container-structure-test test --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --config .github/container-structure-test.yaml

  # =============================================================================
  # COMPLIANCE CHECKS
  # =============================================================================
  
  compliance:
    name: ‚úÖ Compliance & Policy Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check License Compliance
        run: |
          python scripts/license-checker.py

      - name: Validate Security Policies
        run: |
          python scripts/validate_security_policies.py

      - name: Check Dependencies for Known Issues
        run: |
          python scripts/dependency-checker.py

      - name: Validate Configuration Security
        run: |
          python scripts/config-security-validator.py

  # =============================================================================
  # BUILD AND RELEASE
  # =============================================================================
  
  build:
    name: üèóÔ∏è Build & Package
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build Package
        run: |
          python -m build

      - name: Verify Package
        run: |
          twine check dist/*

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # =============================================================================
  # CONTAINER BUILD
  # =============================================================================
  
  container-build:
    name: üê≥ Container Build & Push
    runs-on: ubuntu-latest
    needs: [security-scan, container-security, test]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and Push Container Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # DEPLOYMENT
  # =============================================================================
  
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, container-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging Environment
        run: |
          # Add staging deployment logic here
          echo "Deploying to staging..."
          # kubectl apply -f deployments/staging/
          # helm upgrade staging-release ./charts/gan-cyber-range

      - name: Run Smoke Tests
        run: |
          python scripts/smoke-tests.py --environment=staging

      - name: Notify Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, container-build]
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production Environment
        run: |
          # Add production deployment logic here
          echo "Deploying to production..."
          # kubectl apply -f deployments/production/
          # helm upgrade production-release ./charts/gan-cyber-range

      - name: Run Production Health Checks
        run: |
          python scripts/health-checks.py --environment=production

      - name: Update Release Notes
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # MONITORING SETUP
  # =============================================================================
  
  monitoring:
    name: üìä Setup Monitoring & Alerts
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Monitoring
        run: |
          # Setup monitoring dashboards and alerts
          python scripts/setup-monitoring.py

      - name: Create Deployment Marker
        run: |
          # Create deployment marker for monitoring
          curl -X POST "https://api.datadog.com/api/v1/events" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d '{
              "title": "GAN Cyber Range Deployment",
              "text": "Version ${{ github.ref_name }} deployed to production",
              "tags": ["deployment", "production", "gan-cyber-range"]
            }'

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  
  notify:
    name: üì¢ Send Notifications
    runs-on: ubuntu-latest
    needs: [security-scan, test, build]
    if: always()
    
    steps:
      - name: Notify on Success
        if: ${{ needs.security-scan.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ‚úÖ CI/CD Pipeline completed successfully!
            - Security scans: PASSED
            - Tests: PASSED  
            - Build: PASSED
            Commit: ${{ github.sha }}

      - name: Notify on Failure
        if: ${{ needs.security-scan.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ‚ùå CI/CD Pipeline failed!
            - Security scans: ${{ needs.security-scan.result }}
            - Tests: ${{ needs.test.result }}
            - Build: ${{ needs.build.result }}
            Commit: ${{ github.sha }}
            Please check the logs and fix the issues.