version: '3.8'

services:
  # Main application service
  cyber-range:
    build:
      context: .
      target: development
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: gan-cyber-range:dev
    container_name: gan-cyber-range-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app/src
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=postgresql://gan_user:gan_password@postgres:5432/gan_cyber_range
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_URL=http://prometheus:9090
    env_file:
      - .env
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - cyber-range-logs:/app/logs
      - cyber-range-data:/app/data
    networks:
      - cyber-range-net
    depends_on:
      - postgres
      - redis
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # Needed for security tools
    cap_drop:
      - ALL
    cap_add:
      - NET_RAW  # Needed for network scanning tools
      - NET_ADMIN  # Needed for network configuration
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
      - /app/tmp:noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Database service
  postgres:
    image: postgres:15-alpine
    container_name: gan-cyber-range-db
    environment:
      POSTGRES_DB: gan_cyber_range
      POSTGRES_USER: gan_user
      POSTGRES_PASSWORD: gan_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - cyber-range-net
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gan_user -d gan_cyber_range"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis cache and session store
  redis:
    image: redis:7-alpine
    container_name: gan-cyber-range-redis
    command: redis-server --requirepass redis_password --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - cyber-range-net
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: gan-cyber-range-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - cyber-range-net
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: gan-cyber-range-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - cyber-range-net
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    user: "472:472"  # grafana user
    restart: unless-stopped

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: gan-cyber-range-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - cyber-range-net
    security_opt:
      - no-new-privileges:true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: gan-cyber-range-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - cyber-range-net
    depends_on:
      - elasticsearch
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # Development environment with all tools
  dev-environment:
    build:
      context: .
      target: development
    container_name: gan-cyber-range-dev
    environment:
      - PYTHONPATH=/workspace/src
      - ENVIRONMENT=development
    volumes:
      - .:/workspace
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - dev-vscode:/home/vscode
    networks:
      - cyber-range-net
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_RAW
      - NET_ADMIN
    stdin_open: true
    tty: true
    command: /bin/bash
    profiles:
      - dev

  # Vulnerable application for testing
  vulnerable-webapp:
    image: vulnerables/web-dvwa:latest
    container_name: gan-cyber-range-target
    environment:
      - MYSQL_ROOT_PASSWORD=vulnerables
      - MYSQL_DATABASE=dvwa
      - MYSQL_USER=dvwa
      - MYSQL_PASSWORD=password
    networks:
      - vulnerable-net
    security_opt:
      - no-new-privileges:true
    profiles:
      - testing

# Networks with security isolation
networks:
  cyber-range-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
  
  vulnerable-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    internal: true  # Isolated network for vulnerable services

# Persistent volumes
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  cyber-range-logs:
    driver: local
  cyber-range-data:
    driver: local
  dev-vscode:
    driver: local

# Secrets for production (use Docker Swarm or external secret management)
secrets:
  db_password:
    external: true
  redis_password:
    external: true
  openai_api_key:
    external: true
  anthropic_api_key:
    external: true